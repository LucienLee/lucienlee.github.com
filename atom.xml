<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Self Efficacy]]></title>
  <link href="http://selfecy.com/atom.xml" rel="self"/>
  <link href="http://selfecy.com/"/>
  <updated>2013-08-16T03:51:43+08:00</updated>
  <id>http://selfecy.com/</id>
  <author>
    <name><![CDATA[Lucien Lee]]></name>
    <email><![CDATA[lkiral7903@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[讓Octopress有中文分類及側邊列]]></title>
    <link href="http://selfecy.com/blog/2013/07/13/rang-octopressyou-zhong-wen-fen-lei-ji-ce-bian-lie/"/>
    <updated>2013-07-13T00:18:00+08:00</updated>
    <id>http://selfecy.com/blog/2013/07/13/rang-octopressyou-zhong-wen-fen-lei-ji-ce-bian-lie</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>Octopress 雖然號稱他可以讓人<a href="http://blog.xdite.net/posts/2011/10/07/what-is-octopress">輕鬆部屬、愉悅寫作</a>，但實際上原生 Octopress 2.0 對中文的支持很差，對於與 Ruby 不是好朋友的我，沒有能力自己去改寫，只能去找網路上的 Octopress 前輩們的解法參考，然後 Copy and Paste 試試看究竟可不可以解決問題。</p>

<p>首先我遇到了第一個問題是<strong>『如何使用中文分類，以及將分類顯示在側邊列』</strong>。</p>

<p>很不幸地是，似乎蠻多前輩都是使用英文分類，而其他找到的解法雖然可以使用中文分類，但側編列的問題似乎並不適用於 host 在 <strong>github</strong> 的情況，這真是很奇怪的問題，讓我一度萌生把東西改架在 <a href="https://www.heroku.com/%E2%80%8E">Heroku</a> 上。</p>

<p>最後我參考了 <a href="http://khaos.github.io/">khaos</a> 如何去讓 Octopreess 支援中文分類的作法，如法炮製地更改側邊列的 <code>category_sidebar.rb</code> 讓他成功讓我可以在 github 上的 Octopress 使用中文側邊列，有鑑於我沒有在網路上找到我的情況的解法，在此分享給大家。</p>

<!-- more -->


<h2>解決方法</h2>

<p>基本上我是跟隨 <a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a> 的思考方法。既然中文行不通，那就把中文換成英文拼音，以英文來存取中文檔名。實作上是利用 <a href="https://github.com/rsl/stringex">stringex</a> 的 <code>to_url</code> 函式把中文分類標籤的連結位置與相應的 <code>category_dir</code> 全部換成相應的拼音。實際上當你使用 <code>rake new_[post|page]</code> 指令創建含有中文名的文章時也採用了這樣的技巧，你可以去觀察 Octopress 所建出來的 markdown 檔名，中文標題全部換為拼音顯示。</p>

<h3>實際實現方法</h3>

<h4>1. 修改分類的生成方法</h4>

<p>首先你得先讓修改分類的生成方法，使之可以使用中文。我採用 khaos 的 <a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a> 這篇文章所提方法，在此轉錄他的作法：</p>

<p>請修改你的 <code>plugins/category_generator.rb</code>，首先在文件頭加上一句：</p>

<pre><code>require "stringex"
</code></pre>

<p>然後找到其中定義 category 目錄的部分，約在 109 行附近：</p>

<pre><code>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase), category)
</code></pre>

<p>將其修改為：</p>

<pre><code>self.write_category_index(File.join(dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase), category)
</code></pre>

<p>再找到定義中文分類網頁標籤的部分，約是 164 行附近：</p>

<pre><code>"&lt;a class='category' href='http://selfecy.com/#{dir}/#{item.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase}/'&gt;#{category}&lt;/a&gt;"
</code></pre>

<p>將其修改為：</p>

<pre><code>"&lt;a class='category' href='http://selfecy.com/#{dir}/#{category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').to_url.downcase}/'&gt;#{category}&lt;/a&gt;"
</code></pre>

<p>這樣你就完成中文分類的修改了。</p>

<h4>2. 加入分類到側邊欄</h4>

<p>在修改側篇欄可以使用中文分類前得先有側邊欄分類，以下參考 <a href="https://github.com/DrayChou/OctopressBlog/blob/master/plugins/category_sidebar.rb">DrayChou的做法</a> ：</p>

<p>首先把以下內容存到 <code>plugins/category_sidebar.rb</code> 。</p>

<figure class='code'><figcaption><span>category_sidebar.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="k">module</span> <span class="nn">Jekyll</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">CategoryListTag</span> <span class="o">&lt;</span> <span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Tag</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="n">context</span><span class="p">)</span>
</span><span class='line'>      <span class="n">html</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>      <span class="n">categories</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">.</span><span class="n">keys</span>
</span><span class='line'>      <span class="n">categories</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">category</span><span class="o">|</span>
</span><span class='line'>        <span class="n">posts_in_category</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">registers</span><span class="o">[</span><span class="ss">:site</span><span class="o">].</span><span class="n">categories</span><span class="o">[</span><span class="n">category</span><span class="o">].</span><span class="n">size</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">&lt;&lt;</span> <span class="s2">&quot;&lt;li class=&#39;category&#39;&gt;&lt;a href=&#39;/blog/categories/</span><span class="si">#{</span><span class="n">category</span><span class="o">.</span><span class="n">downcase</span><span class="si">}</span><span class="s2">/&#39;&gt;</span><span class="si">#{</span><span class="n">category</span><span class="si">}</span><span class="s2"> (</span><span class="si">#{</span><span class="n">posts_in_category</span><span class="si">}</span><span class="s2">)&lt;/a&gt;&lt;/li&gt;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">html</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Liquid</span><span class="p">:</span><span class="ss">:Template</span><span class="o">.</span><span class="n">register_tag</span><span class="p">(</span><span class="s1">&#39;category_sidebar&#39;</span><span class="p">,</span> <span class="ss">Jekyll</span><span class="p">:</span><span class="ss">:CategoryListTag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下來把以下內容存到 <code>source/_includes/asides/category_sidebar.html</code> 。</p>

<figure class='code'><figcaption><span>category_sidebar.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;section&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Categories<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul</span> <span class="na">id=</span><span class="s">&quot;categories&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {% category_sidebar %}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/section&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>最後修改 <code>_config.yml</code> ，增加分類內容 <code>asides/category_sidebar.html</code> 到 <code>default_asides</code>。</p>

<figure class='code'><figcaption><span>_config.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="err">   </span><span class="l-Scalar-Plain">default_asides</span><span class="p-Indicator">:</span> <span class="p-Indicator">[</span><span class="nv">asides/category_sidebar.html</span><span class="p-Indicator">,</span> <span class="nv">asides/recent_posts.html</span><span class="p-Indicator">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>這樣就完成加入側邊欄的分類列表了。</p>

<h4>3. 修改側邊欄支援中文分類</h4>

<p>最後你可以藉由修改 <code>plugins/category_list_tag.rb</code> 來讓他支援中文分類。作法如下：
首先在文件頭加入：</p>

<pre><code>require "stringex"
</code></pre>

<p>再來找到 <code>category_list_tag.rb</code> 檔案裡的：</p>

<pre><code>html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://selfecy.com/blog/categories/#{category.downcase}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</code></pre>

<p>將之換成底下這句：</p>

<pre><code>html &lt;&lt; "&lt;li class='category'&gt;&lt;a href='http://selfecy.com/blog/categories/#{category.to_url.downcase}/'&gt;#{category} (#{posts_in_category})&lt;/a&gt;&lt;/li&gt;\n"
</code></pre>

<p>這樣便大功告成，打完收工。</p>

<h2>參考資料</h2>

<p><a href="http://blog.sprabbit.com/blog/2012/03/23/octopress/">关于在64位 Windows 7 中部署中文化的Octopress</a> <br/>
<a href="http://geron.heroku.com/blog/2012/03/octo-cate-cn-spo/">Octopress博客分类添加中文支持</a> <br/>
<a href="http://khaos.github.io/blog/2012/12/06/using-chinese-category-tags-in-octopress/">Octopress易筋经，中文分类标签</a><br/>
<a href="https://github.com/DrayChou/OctopressBlog/">DrayChou 的 Octopress 框架</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AWS EC2 快速連線方法]]></title>
    <link href="http://selfecy.com/blog/2013/07/10/aws-ec2-kuai-su-lian-xian-fang-fa/"/>
    <updated>2013-07-10T15:57:00+08:00</updated>
    <id>http://selfecy.com/blog/2013/07/10/aws-ec2-kuai-su-lian-xian-fang-fa</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>最近跟著 <a href="https://www.coursera.org/">Coursera</a> 的 <a href="https://class.coursera.org/startup-001">Startup Engineering</a> 開始學習我較不熟悉的 Linus 環境底下開發與 Deployment ，順手把註冊半年以久的 AWS 帳號進行信用卡認證，正式開通使用。</p>

<p>不清楚 Coursera 的朋友們可以上 <a href="http://zh.wikipedia.org/wiki/Coursera">Wikipedia</a>了解詳情。簡單的說，他是由 Stanford 大學教授 Andrew Ng 和 Daphne Koller 發起的大學線上課程，上面有許多一流大學所開設的<strong>免費</strong>課程，可以讓大眾自由學習。</p>

<p>這篇文章的重點是如何快速連線 AWS EC2，雖然在 Startup Engineering 課程中有介紹如何達成，但<a href="http://blog.dm4.tw/">dm4</a>大大分享給我更多一點的技巧，在此分享給大家。</p>

<!-- more -->


<h2>原本的情況</h2>

<p>遠端連線 EC2 的方法是藉由 <code>ssh</code> 指令進行加密連線，在 AWS 建立新的 instance 的時候，我們會得到一個 <code>.pem</code> 檔案作為連線認證使用。這時候 AWS 給我們的連線範例是：</p>

<pre><code># @local machine

$ cd downloads  #移動到你的 .pem 檔所在地方
$ ssh -i yourkey.pem ubuntu@ec2-54-218-73-84.us-west-2.compute.amazonaws.com 
</code></pre>

<p>這串指令實在很麻煩，身為一個記憶力正常的凡人，看到這段指令絕對是掩面而泣。</p>

<p><img src="https://lh3.googleusercontent.com/-tNSs9v6H-60/Ud0wLtSi-TI/AAAAAAAAAY0/6kEC7ufAQFs/w800-h549-no-Ut/www.hdwaller.com+Grumpy-Cat-Full-HD-Wallpaper.jpg" width="50%"></p>

<p>所幸課程馬上就傳授如何縮短指令的方法。</p>

<h2>課程的版本</h2>

<p>簡單來說，我們可以藉由 <code>.ssh/config</code> 檔案預先存好登入所要的資訊並給予別名，之後就可以直接打別名進行連線，系統會直接抓取 config 的資料，就不需要一再輸入。那 <code>.ssh/config</code> 要怎麼寫呢？其實他的基本格式很簡單，就像下面這般：</p>

<pre><code>Host 名稱(就是用來好記的別名)
    HostName 主機名字
    User 登入用戶名
    IdentityFile 驗證文件的路徑
</code></pre>

<p>實際上操作的話，以下提供課程所使用的例子：</p>

<pre><code># @local machine
# 首先先複製 key.pem 到 ~/.ssh 底下，並改好檔案權限
$ mkdir -p ~/.ssh
$ cp ~/downloads/skey.pem ~/.ssh/
$ chmod 400 ~/.ssh/skey.pem
$ chmod 700 ~/.ssh
$ vim ~/.ssh/config
# 在 config 編輯內容如下
Host awshost1
    HostName ec2-54-218-35-71.us-west-2.compute.amazonaws.com #@後面那段
    User ubuntu #@前面那段
    IdentityFile "~/.ssh/skey.pem"
</code></pre>

<p>設置好之後就可以以<code>ssh 別名</code>來連線了，比如說以上的例子就是輸入<code>ssh awshost1</code>來連線。</p>

<h2>再也不用 .pem 了</h2>

<p>雖然上面已經可以十分方便了，但是我們還可以再做更多一點。
上面的方法我們還是需要保留 <code>.pem</code> 檔案，事實上我們可以連本地端的 <code>.pem</code> 檔都不用就可以連線，以下就是要介紹如何跟你的 <code>.pem</code> 說拜拜。</p>

<pre><code># @local machine 
# 首先移動到你的 .pem 所在的地方，印出 .pem 檔的內容。記得要用你自己的檔名換掉yourkeyname
$ cat yourkeyname.pem  
# 印出來的內容複製起來，他會長的像是：
$ ssh-rsa AAAAB3NzaC1yc2EAA……
</code></pre>

<p>再來連線到你 EC2 的遠端機器，把複製到的東西寫到 <code>~/.ssh/authorized_keys</code> 裡面。</p>

<pre><code># @remote machine
$ vim .ssh/authorized_keys
# 貼上你剛剛從自己電腦複製出來的那段東西，存檔。
</code></pre>

<p>之後你就可以把你的 <code>.pem</code> 檔給刪掉啦！然後記得把你 <code>.ssh/config</code> 底下的 <code>IdentityFile "~/.ssh/skey.pem"</code> 這一行刪掉。
你最後的 <code>config</code> 應該是長這樣子的：</p>

<pre><code>Host awshost1
    HostName ec2-54-218-35-71.us-west-2.compute.amazonaws.com
    User ubuntu
</code></pre>

<p>很簡單吧！五分鐘不到的設定可以節省我們以後更多開發時間呢！</p>

<h2>參考資料</h2>

<p><a href="https://d396qusza40orc.cloudfront.net/startup/lecture_slides%2Flecture3-linux-ssjs-v2.pdf">Startup Engineering: Lecture 3: Linux and Server-Side Javascript</a></p>

<p>感謝<a href="http://blog.dm4.tw/">dm4</a>大大的教學。</p>

<p>貓咪圖片 from <a href="http://www.hdwaller.com/new-grumpy-cat-full-hd-wallpaper-4376-just-another-high-quality-hq.html">HDWaller</a></p>

<h3>附註</h3>

<p><code>.pem</code> 全名為 Privacy Enhanced Mail，想了解更多的話可以讀 <a href="http://en.wikipedia.org/wiki/X.509">X.509</a> 在 Wiki 的資料或是 <a href="http://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file">server fault 上面的討論</a> 。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用者沒你想像的這麼單純]]></title>
    <link href="http://selfecy.com/blog/2013/05/22/when-conflicts-happen-in-design/"/>
    <updated>2013-05-22T20:58:00+08:00</updated>
    <id>http://selfecy.com/blog/2013/05/22/when-conflicts-happen-in-design</id>
    <content type="html"><![CDATA[<p><a href="http://www.flickr.com/photos/safcircocreativo/4066567809/"><img src="http://farm3.staticflickr.com/2455/4066567809_bc55e7daaa_z.jpg" width="640" height="498"></a></p>

<p>現今在產品開發中使用者中心設計（User-Centered Design）越來越被重視。大家在產品設計時遇到不確定的選擇，總會說上一句「那讓使用者來決定吧！」，然後展開了如火如荼的使用者調查，然而使用者調查並不是萬靈丹，只單單依賴使用者中心設計反而會造成一些問題。原因是你所想的使用者並沒有麼單純。很多時候你的產品的使用者他們是好幾種不同類型的族群所混和出來的<strong>一大群使用者</strong>，更甚至還有其他相關參與者。</p>

<!--more-->


<h2>不單純的使用者們</h2>

<p>在我們進行產品設計時，會規劃出<a href="http://lifenidea.nccu.edu.tw/?q=node/41">人物誌( Persona )</a>，描寫目標使用者的詳細樣貌，建構出目標使用者的模樣與細節。但事實上並不是每一個專案裡的使用者，都是唯一一種樣貌，比如說當我們要設計一個互動學習環境時，其中所牽涉到的角色有學生、老師還有教材設計者。這幾個族群雖然都參與到我們的產品裡，但彼此間的目標需求存在差異，甚至會有衝突的目標。比如說老師希望學生可以學習抽象思考，而非單單學會解決固定的問題；可是學生覺得利用真實世界舉例的問題比較有趣。在這樣的情況下，我們會很難從中整理出最終的主要角色，以及發展出適合的場景( Scenario )。</p>

<p>更甚至還有其他特殊的情況，會讓我們的使用者樣貌更為混亂。<br/>
有一群神祕的角色們存在於我們的<em>使用族群之外</em>，但是會重重影響我們的使用者。UCD告訴我們要專注在我們的使用者身上，去了解他們在想什麼、怎麼工作、怎麼生活，但是很有趣地在我們很少關注的使用者以外的角色中，存在著一群會<strong>『重重影響使用者的角色』</strong>。</p>

<p>然而那些角色是我們不得不去考慮的。</p>

<p>比如說前陣子Howlin前輩分享在臉書的<a href="https://www.facebook.com/hlyangster/posts/10200584969960843">工作心得</a>，就有類似的想法：</p>

<blockquote><p>persona的設計對消費型商品比較需要，對於B2B或者流程軟體、生產力工具，persona並不是按照年齡或文化背景畫分的，而是按照初階、進階、超級使用者畫分，這問題很有意思，因為我馬上就碰到了。</p>

<p>今天對流程軟體，做UI presentation的時候，老總就針對不同主管的立場提出質疑，因為不同高度有不同的操作行為，同時還有政策考量的問題，有些介面我做得太&#8221;friendl&#8221;y了，中層主管為了方便，當然希望表單越容易簽越好，我的設計就是以他們為中心，但對於高階主管來說，會希望中階主管一張張看過表單，謹慎簽核，也許實際上管不到，但介面上，不該引導使用者做出「政治不正確的行為」</p>

<p>購買者，未必是使用者，讓我想到兒童的網路看門員軟體=.=</p></blockquote>

<p>在這裡所介紹重重影響使用者的角色，是指決定是否給使用者使用產品的實際決策者，他們掌握我們產品的生殺大權。但是他們的目標或許與真實的使用者不一樣，比如說前輩提到色情守門員。（我想情慾蠢動的少年們都會自己為自己的需求找到出路的XDD）</p>

<p>像這種例子層出不窮，像是平板醫療軟體－－幫助醫師整合醫療資訊的APP，實際的使用者醫師們並沒有決策權，實際擁有決策權的院長、董事們卻會有其他不同於醫師需求的考量，所以當我們只去了解醫生卻沒有顧慮到決策人的想法時，可能會造成產品的銷售問題。</p>

<p>當用的人與買的人不一樣的時候，如果我們乖乖地只為目標使用者設計產品，就像玩遊戲時，專注在眼前的魔王上，把自己技能裝備搭配成專門剋眼前魔王的組合，在好不容易攻略魔王時，發現剛剛打倒的竟然只是小魔王，真正的最終大BOSS：設計產品我們時所忽略的角色，等到我們筋疲力盡時再重重地賞了我們一巴掌。</p>

<h3>『啪~~』</h3>

<p>畫成表格以後你會發現打BOSS策略錯誤跟產品開發失敗有多麼像：</p>

<table>
<caption>勇者冒險與產品開發之比較</caption>
<thead>
    <tr class="ac">
        <th>攻略魔王</th>
        <th>產品開發</th>
    </tr>
</thead>
<tbody>
    <tr class="ac">
        <td>研究魔王弱點</td>
        <td>使用者調查</td>
    </tr>
    <tr  class="ac">
        <td>搭配技能裝備</td>
        <td>產品開發</td>
    </tr>
    <tr class="ac">
        <td>打倒小魔王</td>
        <td>產品測試完成</td>
    </tr>
    <tr class="ac">
        <td>大魔王出現</td>
        <td>決策者出現</td>
    </tr>
    <tr class="ac">
        <td>重重打擊冒險者</td>
        <td>打槍已經完成的產品</td>
    </tr>
    <tr class="ac">
        <td colspan="2">GG</td>
    </tr>
</tbody>
</table>


<p></p>

<p>總結以上，對於產品設計我們應該不只專注在使用者，而是要擴大到所有可能參與的角色，我稱之為權益相關者( Stockholder )。</p>

<h2>現實的困境</h2>

<p>但是文章一開始所提到使用者們彼此的目標常常會發生衝突，當我們加入使用者以外的權益相關者，會讓衝突變為更激烈，在這種「公說公有理，婆說婆有理」的情況下，所謂「資源有限，慾望無窮」，我們勢必無法滿足全部的需求，那我們要怎麼有所取捨呢？</p>

<p>很不幸地我們目前並沒有適合的設計框架可以幫我們解決這種問題，設計師常常是根據專案發展以及需求，發展出一次性的方法。每次遇到問題隨機應變提出解決方法來調整產品發展，通常判斷的方法都是以設計師的直覺或是誰是權益者中影響力最大的角色來決定產品方向。這樣並不是一個好方法，我們應該建立可以重複利用及較為科學的原則幫助我們解決需求衝突。</p>

<h2>幾個有用的設計原則</h2>

<p>今年 CHI&#8217; 13 中有一篇論文<a href="http://dl.acm.org/citation.cfm?id=2470670"> <em>Why Interactive Learning Environments Can Have It All: Resolving Design Conflicts Between Competing Goals.</em></a> 剛好嘗試解決這樣的問題。他們專注在設計互動學習環境( interactive learning environment )上所遇到的目標衝突，比如說像是設計教育遊戲、線上學習系統等等，所遇到的不同權益者的衝突。</p>

<p>他們提出了三個原則，幫助設計師解決目標衝突的問題：</p>

<h3>建立目標位階（ Forming a Goal Hierarchy ）</h3>

<p>藉由建立目標的優先等級，來決定開發目標。
實際操作的步驟如下：</p>

<h4>第一步我們必須找出衝突在哪裡</h4>

<p>一開始可以利用<a href="http://en.wikipedia.org/wiki/Affinity_diagram">親和圖法（affinity diagrams）</a>來幫助我們整理需求目標。藉由把所有需求目標寫在便利貼上，慢慢去整理聚合把便利貼分類成幾個大集合，再根據集合中的便利貼特性為集合命名一個大目標，比如說在論文中他們整理出五個目標：</p>

<ul style="list-style:none;">
    <li>目標1. 穩健的專業知識而且可以應用到新的問題</li>
    <li>目標2. 標準考試中的好表現</li>
    <li>目標3. 方便管理教學進行</li>
    <li>目標4. 讓學生獲得信心不斷挑戰問題（self efficacy）</li>
    <li>目標5. 有趣且具娛樂性</li>
</ul>


<p><img src="http://farm1.staticflickr.com/123/324420773_3ddc071240.jpg" alt="affinity diagram"></p>

<p>然後再列出為了達到每個目標所必須達成的小目標，比如說為了滿足「標準考試中的好表現」會有小目標：解決類似題目的能力、提供延伸練習的機會；「有趣且具娛樂性」則是像遊戲般多彩的介面和花俏的元素。列出這些小目標以後，便開始檢視小目標和小目標之間有衝突，把這些衝突給標記起來。</p>

<h4>第二步給目標需求打分數</h4>

<p>發現衝突後我們要開始為衝突目標排優先順序，此時我們要建立判斷優先等級的標準。<br/>
我們可以藉由目標需求中找出大家覺得最重要的目標，所有設計都應該要滿足它。以其他目標有沒有為完成最重要目標為基準來判斷目標的重要性。此時我們可以利用相關權益者所組成焦點團體( focus group )幫忙找出最重要的目標。
比如說論文中他們藉由訪談他們挑出「穩健的專業知識」及「標準考試中的好表現」作為最重要的目標，而且他們發現老師十分在意學生學習的深度，所以「穩健的專業知識」優先於「標準考試中的好表現」。（目標1 > 目標2）</p>

<p>有了主要目標以後，我們可以利用他來判別其他目標有沒有滿足主要目標來評分，
比如說論文中的例子：</p>

<table>
    <thead>
        <tr class="ac">
            <th>目標</th>
            <th>效果</th>
            <th>得分</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>目標四：讓學生獲得信心不斷挑戰問題</td>
            <td>簡單的題目可以增加娛樂性（＋目標5）<br>
                簡單但有一定程度的問題可以增加學習效果（＋目標1）<br>
                太簡單的問題對學生深入學習內容沒有幫助（－目標1）<br>
                學生在遇到比較困難的情況下會對課堂管理有正向的影響（+目標3）</td>
            <td>0.5(目標5的得分) + 1-1+0.5(目標3的得分)</td>
        </tr>
    </tbody>
</table>


<p>（目標請參考此章節一開始的例子）</p>

<p>「讓學生獲得信心不斷挑戰問題」這個目標的小目標有「用較具體的說明來讓學生理解」，這點會造成課程簡單。根據目標會造成的效果是否滿足其他目標來算出他得分，比如說他可以增加學習效果滿足了主要目標，可以獲得了一分；但是太簡單的問題對學生深入學習內容沒有幫助會違背主要目標，所以扣一分。至於滿足了非主要目標則在積分貢獻上打個折扣，比如簡單的題目可以增加娛樂性滿足了目標5，所以加上 <strong><code>0.5 ×目標5的得分</code></strong> ；而學生學習遇到比較少困難時，對教學的管理也有正向的幫助，所以加上 <strong><code>0.5 ×目標3的得分</code></strong>。
至於目標3 與 5 的分數也會經由類似的過程算出，最後再導回目標 4 的積分函式中。</p>

<p>藉由這個方法，我們可以建立起目標需求的優先積分，優先順序會從主要目標需求最高到積分最低的目標需求。以先前提的例子來說：假設算出來 <code>目標 3 ＝ 2分</code>、<code>目標 4 ＝ 1 分</code>、<code>目標 5 ＝ 0分</code>，我們可以優先等級如下：</p>

<pre><code>目標1 &gt; 目標2 &gt; 目標3 &gt; 目標 4 &gt; 目標5
</code></pre>

<p>最後我們可以根據優先等級來決定衝突發生時，我們應該要優先滿足哪個需求。</p>

<h3>參數實驗（ Parametric Experiments ）</h3>

<p>並不是所有問題都適合目標位階法，有時候我們會需要更仔細地考慮選擇。這種時後，我們可以採用參數實驗，實際規劃對照組與應變組去比較兩者的結果，來決定怎麼選擇設計方案。</p>

<p>論文中他們運用在決定要給學生練習一整個完整複雜的問題( holistic )或是把問題拆解成好幾個步驟，讓學生有結構慢慢地完成問題( subgoaling )。以學習程式舉例來說，一般傳統課堂回家作業要求學生做出完整的翻牌配對遊戲就是提供完整複雜問題，如果是像<a href="http://www.codecademy.com/">codecademy</a>把作業拆成小部分，先要求你完成建立卡牌功能、洗牌功能再來才是比對功能，讓學生一步步完成作業，則是讓學生有結構慢慢地完成問題。</p>

<p><img src="https://lh6.googleusercontent.com/-5uskZMaW4-w/UZ9ATiBZ-2I/AAAAAAAAAXU/LgWokeQfAps/w614-h319-no/h%2526s.png" alt="holistic 與 subgoaling 範例圖"></p>

<p>在案例中他們實驗在課程50%、70%和100%比例使用 subgoaling 的題目，學生的學習成效如何。藉由前測後測來研究學生的學習情況，來決定要採取什麼方案。</p>

<h3>交叉迭代研究（ Cross-Iteration Studies ）</h3>

<p>不過由於不是所有實驗目標都可以控制變因，所以有些情況我們無法利用實驗來幫助我們解決設計衝突。這種時候我們可以採取把我們產品拿給使用者測試，獲取回饋快速修正再進行測試，不斷在兩個衝突間嘗試取得平衡，快速經歷過好幾個迭代調整出兩衝突間，使用者最適合的搭配方案。</p>

<p>在案例中他們應用在解決到底要給學生敘述長且複雜但是有完整背景故事的問題還是提供簡單易用的系統，依照原先的目標位階來決定，他們提供了有完整背景故事的例子給學生，不過學生抱怨要讀很多字、老師覺得系統使用起來並沒有為教學帶來幫助。於是他們決定把完整背景故事給移除，但是後來發現學生沒有真實世界的例子以後，學生對抽象思考感到困難，學生覺得學習起來非常的挫折。經過再次修正，他們決定使用圖像例子取代冗長的故事敘述，比如說在分數教學中，利用圓餅圖取代原先對比薩例子中冗長敘述。在這次修正以後，學生的反應非常好。</p>

<h4>緊貼著使用者</h4>

<p>簡單地說，設計師應該要貼近相關權益者，快速開發修正並獲取回饋，反覆進行修正回饋，去找出衝突間的平衡點。</p>

<h2>結論</h2>

<p>當我們設計產品的時候，往往把所有注意力放在使用者身上，事實上我們應該關注所有與產品有相關的角色，也就是權益相關者( stockholder )身上。以免當我們辛苦開發設計完產品後，卻遭到不被採納的結果。另外相關權益者包含許多不同的角色，每種角色都有著不同的需求目標，而這些需求很有可能是彼此衝突的，在資源有限、慾望無窮的情況下我們不可能同時滿足所有人的需求，我們得在衝突中做出取捨。</p>

<p>這裡我介紹了三個可以依賴的設計原則來幫助我們，在設計衝突中有程序地做出選擇來最大滿足相關權益者們的需求。這三個原則分別是：</p>

<ul>
<li>建立目標位階（ Forming a Goal Hierarchy ）</li>
<li>參數實驗（ Parametric Experiments ）</li>
<li>交叉迭代研究（ Cross-Iteration Studies ）</li>
</ul>


<p>希望藉有這篇文章可以讓各位設計師可以快速完成充滿衝突的專案，另外也感謝各位持續在設計領域研究的研究者們。</p>

<h2>參考資料</h2>

<p><a href="http://dl.acm.org/citation.cfm?id=2470670">Martina A. Rau, Vincent Aleven, Nikol Rummel, Stacie Rohrbach. Why Interactive Learning Environments Can Have It All: Resolving Design Conflicts Between Competing Goals.   ( <em>CHI&#8217; 13</em> )</a></p>

<p>Top image via <a href="http://www.flickr.com/photos/safcircocreativo/">Sebastian Arbelaez Fuentes</a>, CC License. <br/>
&ldquo;Affinity diagram&rdquo; image via <a href="http://www.flickr.com/photos/logicalrealist/">Sean Munson</a>, CC License.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RD水電工不會修水管] 電子報一次就上手]]></title>
    <link href="http://selfecy.com/blog/2013/04/25/how-to-make-the-edm/"/>
    <updated>2013-04-25T01:39:00+08:00</updated>
    <id>http://selfecy.com/blog/2013/04/25/how-to-make-the-edm</id>
    <content type="html"><![CDATA[<p><img src="http://farm9.staticflickr.com/8532/8677674341_d95c6ae4a3_c.jpg" alt="e-paper" /></p>

<h2>前言</h2>

<p><em><a href="http://selfecy.com/blog/categories/rd%E6%B0%B4%E9%9B%BB%E5%B7%A5%E4%B8%8D%E6%9C%83%E4%BF%AE%E6%B0%B4%E7%AE%A1/">RD水電工不會修水管</a>專欄是我在5945呼叫師傅作為RD實習生的學習分享。</em></p>

<p><a href="http://5945.tw">5945呼叫師傅</a>除了過去被動等大家來找我們來解決大眾居家生活的水電問題外，現在也想主動幫助大家擁有美好的生活空間，提出居家加值服務－－牆面彩繪，讓大家可以家裡環境好還要更好。</p>

<p>而隨著新服務的推出，最近發行呼叫師傅也跟著發出第一期電子報，讓用戶們可以看到自己家裡可以怎麼改造。</p>

<p>我在這次機會中第一次體驗到如何製作電子報，雖然他本質上就是一個 html 網頁，但是還是有些不同，以下將為各位娓娓道來電子報的小心得。</p>

<!--more-->


<h2>電子報與一般網頁的不同</h2>

<p>電子報背後事實上就是 html 網頁，那究竟電子報有什麼特別的呢？
理由是<a href="http://en.wikipedia.org/wiki/HTML_email"> HTML格式的email </a>的樣式與一般網頁樣式解讀會有所落差，正確地來說 HTML email 只有 HTML 一部分的能力，而且各家電子郵件解讀 HTML email 的時候，有些地方不符合 W3C 的規範，造成電子報顯示的問題。</p>

<p>比如說 <code>&lt;head&gt;</code> 標籤是在一般 HTML 時可以放 CSS 樣式規則，但在 HTML email 裡使用這樣的方法來定義樣式卻會發生問題，有些電子郵件並不支持這樣的用法，比如說Gmail。</p>

<p>另外使用者用來收信的工具十分多元：桌面收信軟體、網頁介面的 Gmail、Hotmail、Yahoo……。每一家對 HTML email 的顯示能力都有些許差異，導致電子報的版型非常難以設計。</p>

<h2>電子報排版設計小技巧</h2>

<p>由於電子報有許多限制，所以也跟著產生一些原則，讓大家比較不容易製作出破版的電子報。</p>

<ol>
<li>盡量用table來編排。
 現在網頁排版主流使用div，配合浮動（float）來排版，或是利用 position 來定位。但由於 table tag 歷史悠久，它是最能被大多數 email client 辨識的 tag ，而且表格定位單純，設計幾欄他就會保留幾欄給你，比較不會出錯。不過簡單的排版還是可以使用 div ，比如說這次呼叫師傅的電子報的版型比較單純，我就使用 div 標籤。</li>
<li>不要使用 CSS seletor，請使用inline-CSS。
 理由我在之前的例子有說過，由於各家對在 <code>&lt;head&gt;</code> 定義樣式支援不同，為了確保你的樣式可以被正常顯示，只好很暴力地慢慢在標籤內下樣式。</li>
<li>圖片來源使用<strong>絕對路徑</strong>來設置<code>&lt;img src="絕對路徑"&gt;</code>。
 很基本的概念，因為你的圖片不會放在各家 email client 裡。</li>
<li>圖片要設定正確的寬高還有註解，也就是 <code>width</code> 、 <code>height</code> 和 <code>alt</code>。
 設置alt可以讓你在圖片無法顯示的時候，讓使用者還可以知道這張圖片的意思。在 email 裡許多電子郵件服務不會自動顯示圖片，而是詢問使用者是否要顯示圖片，設置 alt 可以在還沒出現圖片前，就由圖片敘述去引起使用者的興趣，讓他選擇顯示圖片。</li>
<li>盡量不要在重要連結上使用圖片。</li>
<li>不要使用 javascript 或 flash 。</li>
<li>不要用 IFRAME 嵌入其他網頁。</li>
<li>確認 HTML 的完整正確，未完成的標籤語法可能會被誤判為 SPAM 郵件。</li>
<li>[For Designer]電子報版面盡量以簡單、大方、易讀性佳為設計原則。
 設計複雜的版面不僅會造成工程師排版的困難，也可能會增加在不同 email client 上顯示畫面不一的情況。</li>
</ol>


<p>最後，在排版時可以去確認目前各家電子郵件服務對 CSS 各種樣式的支援程度，盡量使用各家都支援的屬性。</p>

<ul>
<li><a href="http://www.campaignmonitor.com/css/">CSS Support in Email Client</a></li>
</ul>


<p><img src="https://lh4.googleusercontent.com/-YBFKvUpAWEo/UXzulQh22SI/AAAAAAAAAWQ/k-jQlkr-LHo/w898-h350/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2013-04-28+%25E4%25B8%258B%25E5%258D%25885.21.22.jpg" alt="CSS Support" /></p>

<h2>製作流程心得</h2>

<p>我自己實際製作電子報大致流程如下：</p>

<ul>
<li>設計稿切版</li>
<li>由外而內佈局撰寫 HTML</li>
<li>設置定位 CSS 樣式</li>
<li>設置裝飾 CSS 樣式</li>
</ul>


<p>首先從設計師手上拿到 PSD 設計檔，利用切片工具進行切版。一邊切一邊把版面區塊分出來，並把所需圖片切出來待會使用。</p>

<p><img src="http://farm9.staticflickr.com/8540/8678782452_dd526c3f11_c.jpg" alt="" /><br/>
（如果不會使用切版工具可以參考<a href="http://lincyi.pixnet.net/blog/post/26530621-psd%E7%89%88%E5%9E%8B%E5%88%87%E7%89%87%E7%B6%B2%E9%A0%81%E6%95%99%E5%AD%B8~~%E4%BB%A5photoshop%E7%82%BA%E4%BE%8B">這裡</a>。）</p>

<p>根據切版時的想法，建立HTML標籤語法，把版面架構建立起來。然後從最外層開始撰寫定位樣式，盡量使用浮動或是 Normal flow 來排版。</p>

<p><img src="https://lh6.googleusercontent.com/-VgrcsFvL__s/UXz3cNAIv6I/AAAAAAAAAWg/1t2fkm2S_E0/w657-h798/%25E9%259B%25BB%25E5%25AD%2590%25E5%25A0%25B1clear2.jpg" alt="切割版面區塊" /></p>

<p>等到排版完成，開始補上裝飾樣式，如 <code>font-family</code> 、 <code>font-size</code> 、 <code>color</code> 、 <code>background</code> 、 <code>border</code> ……等等。</p>

<p>切記寫樣式時，一定要使用 inline CSS，例如：</p>

<pre><code>&lt;p style="color:#ff0; font-size:20px; font-family:arial black;"&gt;我是電子報。&lt;/p&gt;
</code></pre>

<h2>後記</h2>

<p>等我完成電子報以後，才發現有一個非常棒的工具<a href="http://beaker.mailchimp.com/inline-css">CSS Inliner Tool</a>，可以幫我們把 Embed CSS 轉成 Inline CSS ，也就是我之前花許多無謂時間精力去改寫的Inline CSS，現在只要直接用現成的CSS頁面去轉換，不到幾秒鐘，電子報或EDM就自動完成了。</p>

<h3>參考資料</h3>

<p><a href="http://blog.yam.com/hanasan/article/56605300">Yijen&rsquo;s blog－html電子報設計原則整理</a><br/>
<a href="http://blog.miniasp.com/post/2007/11/Recommandation-on-e-Newsletter-Template-design.aspx">Will 保哥－電子報網頁版型設計建議</a><br/>
<a href="http://www.reachcustomersonline.com/how-to-code-html-email-newsletters-all-new-version/?doing_wp_cron=1349149818.9325120449066162109375#step5">How To Code HTML Email Newsletters</a></p>

<p><em>(本篇同步刊載於<a href="5945.tw/blog">5945呼叫師傅-部落格</a>)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[RD水電工不會修水管] Git 簡單使用情境教學]]></title>
    <link href="http://selfecy.com/blog/2013/03/25/git_workflow/"/>
    <updated>2013-03-25T15:57:00+08:00</updated>
    <id>http://selfecy.com/blog/2013/03/25/git_workflow</id>
    <content type="html"><![CDATA[<p><img src="http://farm9.staticflickr.com/8524/8673251944_0e3ca1f1f3_z.jpg" alt="" /></p>

<h2>前言</h2>

<p><em><a href="http://selfecy.com/blog/categories/rd%E6%B0%B4%E9%9B%BB%E5%B7%A5%E4%B8%8D%E6%9C%83%E4%BF%AE%E6%B0%B4%E7%AE%A1/">RD水電工不會修水管</a>專欄是我在5945呼叫師傅作為RD實習生的學習分享。</em></p>

<p>Git是一種分散式的版本控制系統，版本控制對一個開發團隊來說是不可或缺的工具。他提供了一個乾淨的方法，讓團隊內的開發、除錯、測試實驗性的新功能，不會相互干擾。另外對個人來說，他可以在你程式改爛以後，幫你時光倒流回到之前的樣子。
總結來說Git有以下幾點特色：</p>

<ul>
<li>可以隨時復原到過去的版本</li>
<li>多人協作時不會覆蓋到別人的檔案</li>
<li>可以保留修改記錄，知道每個人的程式更動</li>
<li>軟體發行時，分出開發版與維護版</li>
</ul>


<p>我認為掌握Git是培養團隊開發技巧的第一步。
Git本身雖然只是個版本控制系統，但他背後暗藏著一個良好的團隊工作流（workflow）概念。所謂<strong>「練武不練功，老來一場空」</strong>，掌握Git指令只是學習的第一步，更重要的是使用Git的開發心法。</p>

<p>對於5945呼叫師傅來說，當然也十分倚賴Git來管理團隊開發。剛加入不久5945，<a href="https://www.facebook.com/tonylovejava">TonyQ</a> 大大就分享許多讓我受益良多的經驗，我在這裡分享一點小小心得。</p>

<!--more-->


<h2>安裝Git</h2>

<p>請參考 Github 官網</p>

<ul>
<li><a href="http://help.github.com/mac-set-up-git/">Mac setup git</a></li>
<li><a href="http://help.github.com/win-set-up-git/">Windows setup git</a></li>
<li><a href="http://help.github.com/linux-set-up-git/">Linux setup git</a></li>
</ul>


<h2>設定</h2>

<p>Git commit除了記錄程式的變動外，也會記錄作者的資訊，你可以預先設定你的姓名和Email：</p>

<pre><code>git config --global user.name "Your Name"
git config --global user.email "your_email@whatever.com"
</code></pre>

<p>我們可以設定 Git讓他在終端機輸出時加上顏色，讓我們更方便閱讀：</p>

<pre><code>git config --global color.ui true
</code></pre>

<h2>讓我們開始使用Git吧！</h2>

<p>首先我們建立一個新的Repository。</p>

<pre><code>git init
</code></pre>

<p>或是 Clone 現有的 Repository ，像是新剛加入別人專案時，要先把目前的程式先複製一份到本機上。你可以在Github或是Bitbucket上看到一個專案位置，把它複製起來後輸入<code>git clone 複製位置</code>，此時自己的電腦就會有一份專案檔案了。</p>

<p><img src="http://farm9.staticflickr.com/8522/8671665547_35020ba137_z.jpg" alt="github" /></p>

<pre><code>git clone git@github.com:LucienLee/5945_RD_training.git
</code></pre>

<h2>第一次提交就上手</h2>

<p><code>git status</code>可以幫助我們檢查git狀態。
在每次提交之前，很重要地是確認自己git的狀態，了解現在檔案Stage的狀況以及目前的branch，可以幫助自己避免做出意外的操作。</p>

<p>由於<code>git status</code>是一個非常常使用的指令，所以我們可以利用以下指令幫他加入別名，讓我們可以用自定的名字來呼叫他：</p>

<pre><code>git config --global alias.st status
</code></pre>

<p>如此一來，就可以用<code>git st</code>代替<code>git status</code>了。</p>

<p><img src="http://farm9.staticflickr.com/8531/8671712357_27e67402d1_z.jpg" alt="git status" /></p>

<p>上面表示我們正在一個名為master的branch上，然後有一些檔案更動了還沒有加入暫存區（stage）裡。</p>

<p>我們可以利用<code>git add</code>把檔案加到暫存區中。</p>

<pre><code>git add phase1/test/index.php
</code></pre>

<p>雖然我們可以直接使用<code>git add .</code>一口氣把資料夾底下所有檔案加到暫存區裡頭，但非常不建議不檢視狀態直接加，因為這樣很有可能會加入你不確定或不想追蹤的檔案們，比如說我使用<code>git add .</code>會把資料夾的Metadata－－phase1/.DS_Store加入暫存區，然而我們並不需要他。</p>

<p><img src="http://farm9.staticflickr.com/8384/8671794541_128ba186c7_z.jpg" alt="git add" /></p>

<p><code>git add</code>完以後我們可以發現git狀態改變了，我們可以把暫存區的東西<strong>『存檔』</strong>，也就是提交，提交會建立一個節點，讓我們以後可以在需要的時候回到這個節點的狀態。我們可以利用<code>git commit</code>來提交檔案。
<code>git commit</code>後會要求你寫下commit message，讓你標示這個提交的內容是什麼，幫助你以後要回來過去的記錄點時，可以知道要選擇哪個節點。</p>

<p>那你也可以加上以下參數幫助 commit:</p>

<p>加上<code>-m</code>後在加上訊息，可以讓你直接快速提交。</p>

<pre><code>git commit -m "commite message"
</code></pre>

<p>加上<code>-am</code>則是可以把所有 tracked 但還未 staged 的檔案直接加入並提交，但是十分不建議使用，我們應該要清楚地知道自己提交了什麼。</p>

<pre><code>git commit -am "commite message"
</code></pre>

<p>加上 <code>-v</code> 會列出更動的紀錄，我們可以直接比較檔案的變動。我在5945實習中被要求使用 <code>-v</code> 來進行commit，理由是在 commit 之前<strong>『要確認自己究竟寫了什麼東西』</strong>，藉由重新審視來確保自己寫的程式是正確的。</p>

<pre><code>git commit -v
</code></pre>

<h2>在分支上開發</h2>

<p>branch 是指分支的意思，我們可以在 git 上開多個 branch 讓不同人同時開發不同部分最後再合併（merge）起來。舉例來說，當我們要開發新功能或是要修正某個 Bug，甚至有時候想要些一些測試的程式來玩玩看，我們可以利用 branch 保持開發環境乾淨。</p>

<p>我可以利用 <code>git branch</code> 來開一個新的分支：</p>

<pre><code>git branch "branch name"
</code></pre>

<p>然後利用 <code>git branch</code> 來看我們現在有哪些分支：</p>

<p><img src="http://farm9.staticflickr.com/8393/8671903821_5e3e453547_z.jpg" alt="git branch" /></p>

<p>像現在我們有 master 和 x-plan 兩支，而且目前位在master上。
我們可以使用 <code>git checkout</code> 來切換所在的branch：</p>

<pre><code>git checkout "x-plan"
</code></pre>

<p>這樣我們就會切到 x-plan 上了。
我們可以在 x-plan 上獨立開發我們想要的東西，然後一樣在這支上面提交以後，最終我們想把 x-plan 的東西跟別人的東西合併，此時我們可以運用 <code>git merge</code> 來幫助我們合併兩條分支。
首先先切回 master 上，然後把 x-plan 合併進來：</p>

<pre><code>git checkout master
git merge x-plan
</code></pre>

<p>這樣就可以在不干擾團隊其他人的情況下開發了。</p>

<p>另外介紹 <code>git stash</code> ，他可以把目前工作區的東西丟到暫存區裡，等之後在回來拿他。他有許多適用的時機，比如說你不想提交當前完成了一半的程式，但是卻不得不修改一個緊急 Bug ，你可以先把目前工作狀況丟到 stash ，這時候你的工作區和上次剛提交內容的狀況是一樣，所以你可以放心的修 Bug，等到修完 Bug 把程式 push 到 Server 後再把 stash 中剛剛做到一半的東西叫回來繼續。使用方法如下：</p>

<p>將目前所做的修改都暫存起來：</p>

<pre><code>git stash
</code></pre>

<p>取出最新一次的暫存：</p>

<pre><code>git stash apply
</code></pre>

<p>清除所有暫存：</p>

<pre><code>git stash clear
</code></pre>

<h2>小結</h2>

<p>簡易的Git工作流程大概是這樣子的：</p>

<ol>
<li>有新任務出現！</li>
<li>開新分支。</li>
<li>切到新分支進行開發。</li>
<li>把檔案加入 stage。</li>
<li>提交到版本庫。</li>
<li>合併分支。</li>
</ol>


<p><img src="http://farm9.staticflickr.com/8523/8673174076_b2aa77a843_z.jpg" alt="workflow" /></p>

<p>至於要做到什麼進度才提交一次呢？通常是完成一個階段性的小工作，便會做一次 commit ，或是開發中間到了有小功能可以正常執行的新進展。</p>

<h3>參考資料</h3>

<p><a href="https://gitimmersion-apputu.rhcloud.com/index.html">GIT IMMERSION</a><br/>
<a href="http://ihower.tw/blog/archives/6696">Git 教育訓練課程投影片 by ihover</a><br/>
<a href="http://try.github.com/">Try Git</a><br/>
<a href="http://blog.gogojimmy.net/2012/02/29/git-scenario/">Git 情境劇</a></p>

<p><em>(本篇同步刊載於<a href="5945.tw/blog">5945呼叫師傅-部落格</a>)</em></p>
]]></content>
  </entry>
  
</feed>
